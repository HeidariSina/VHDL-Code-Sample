from posixpath import split


OP = {      "add"           : "0000000001",
            "store"         : "0000000101",
            "load"          : "0000001001",
            "jump"          : "0000001101",
            "minus"         : "0000010001",
            "twocmp"        : "0000010100000000",
            "wait"          : "0000011001",

            "sqrt"          : "0001000011000010",
            "exp"           : "0001000111000010",
            "ln"            : "0001001011000010",
            "sinh"          : "0001001111000010",
            "readresult"    : "0001010011000001",
            "readstatus"    : "0001010111000011",
            "setdata"       : "0001011011000000",

            "uartsetTX"     : "0010000010000001",
            "uartgetRX"     : "0010000110000010",
            "uartsetBR"     : "0010001010000011",
            "uartreadST"    : "0010001110000000",

            "timerreadCNT"  : "0011000010100001",
            "timerUPstart"  : "0011000110100010",
            "timerDOstart"  : "0011001010100010",
            "timerUPstop"   : "0011001110100010",
            "timerDOstop"   : "0011010010100010",
            "timersetP"     : "0011010110100011",
            "timersetDC"    : "0011011010100100",

            "iosetout"      : "0100000011100000",
            "iogetinp"      : "0100000111100001",
            "iotemp"        : "0100001011100010",
            "ioadc"         : "0100001111100011",

            "hult"          : "1111111100000000",
    }
HEX = { "00"   : "000000" ,
        "01"   : "000001" ,
        "02"   : "000010" ,
        "03"   : "000011" ,
        "04"   : "000100" ,
        "05"   : "000101" ,
        "06"   : "000110" ,
        "07"   : "000111" ,
        "08"   : "001000" ,
        "09"   : "001001" ,
        "0a"   : "001010" ,
        "0b"   : "001011" ,
        "0c"   : "001100" ,
        "0d"   : "001101" ,
        "0e"   : "001110" ,
        "0f"   : "001111" ,
        "10"   : "010000" ,

        "11"   : "010001" ,
        "12"   : "010010" ,
        "13"   : "010011" ,
        "14"   : "010100" ,
        "15"   : "010101" ,
        "16"   : "010110" ,
        "17"   : "010111" ,
        "18"   : "011000" ,
        "19"   : "011001" ,
        "1a"   : "011010" ,
        "1b"   : "011011" ,
        "1c"   : "011100" ,
        "1d"   : "011101" ,
        "1e"   : "011110" ,
        "1f"   : "011111" ,

        "20"   : "100000" ,
        "21"   : "100001" ,
        "22"   : "100010" ,
        "23"   : "100011" ,
        "24"   : "100100" ,
        "25"   : "100101" ,
        "26"   : "100110" ,
        "27"   : "100111" ,
        "28"   : "101000" ,
        "29"   : "101001" ,
        "2a"   : "101010" ,
        "2b"   : "101011" ,
        "2c"   : "101100" ,
        "2d"   : "101101" ,
        "2e"   : "101110" ,
        "2f"   : "101111" ,
        "30"   : "110000" ,

        "31"   : "110001" ,
        "32"   : "110010" ,
        "33"   : "110011" ,
        "34"   : "110100" ,
        "35"   : "110101" ,
        "36"   : "110110" ,
        "37"   : "110111" ,
        "38"   : "111000" ,
        "39"   : "111001" ,
        "3a"   : "111010" ,
        "3b"   : "111011" ,
        "3c"   : "111100" ,
        "3d"   : "111101" ,
        "3e"   : "111110" ,
        "3f"   : "111111" ,
        }

def Assembel(lane) :
    x = lane.split()
    length = len(x)
    if ((x[0] == "add" or x[0] == "store" or x[0] == "load" or x[0] == "jump" or x[0] == "minus" or x[0] == "wait") and length == 2) :
        return (OP[x[0]] + HEX[x[1]])
    else :
        return (OP[x[0]])

print("the Data Will Write in binary code.txt")
f = open("binary code.txt", "w")
print("give n for break and y for continue")

n = input()
while(n == "y") :
    print("give us assembly code :")
    lane = input()
    result = Assembel(lane)
    f.write(result+"\n")
    print("for more Code give y and for break give n")
    n = input()
f.write("1111111100000000")